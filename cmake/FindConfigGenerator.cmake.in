#!/usr/bin/env python3

# If not stated otherwise in this file or this component's license file the
# following copyright and licenses apply:
#
# Copyright 2020 Metrological
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT PYTHON_EXECUTABLE)
    find_package(PythonInterp 3.5 REQUIRED QUIET)
endif()

# ----------------------------------------------------------------------------------------
# write_config
# ----------------------------------------------------------------------------------------
# Writes and installs a json configs for a plugin.
#
#    optional:
#    PLUGINS     List of the config files to write without extention defaults to
#                PROJECT_NAME only
#                e.g. "UX" will generate and install UX.json for the WebkitBrowser plugin.
#    CLASSNAME   Name of the package, defaults to PROJECT_NAME of
#                the latest cmake project call.
#    LOCATOR     Version of the package, defaults to lib + MODULE_NAME + CMAKE_SHARED_LIBRARY_SUFFIX
#                of the latest cmake project call.
#    COMPONENT   The cmake component group defaults to PROJECT_NAME
#    INSTALL_PATH Overrule the default instalation location. 
#    INSTALL_NAME Overrule the default file name
# ----------------------------------------------------------------------------------------
function(write_config)
    set(optionsArgs SKIP_COMPARE SKIP_CLASSNAME SKIP_LOCATOR)
    set(oneValueArgs CLASSNAME LOCATOR COMPONENT INSTALL_PATH INSTALL_NAME CUSTOM_PARAMS_WHITELIST)
    set(multiValueArgs PLUGINS)

    set(CONFIG_GENERATOR_PATH "@GENERATOR_INSTALL_PATH@/ConfigGenerator")
    set(CONFIG_GENERATOR "${CONFIG_GENERATOR_PATH}/config_generator.py")
    set(CONFIG_COMPARE "${CONFIG_GENERATOR_PATH}/config_compare.py")


    if (NOT CONFIG_GENERATOR)
        message(FATAL_ERROR "The path CONFIG_GENERATOR is not set!")
    endif()

    if(NOT EXISTS "${CONFIG_GENERATOR}" OR IS_DIRECTORY "${CONFIG_GENERATOR}")
        message(FATAL_ERROR "ConfigGenerator path ${CONFIG_GENERATOR} invalid.")
    endif()

    cmake_parse_arguments(ARG "${optionsArgs}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )

    if(ARG_UNPARSED_ARGUMENTS)
        if(ARG_PLUGINS)
            message(FATAL_ERROR "Unknown keywords given to write_config: \"${ARG_UNPARSED_ARGUMENTS}\"")
        else()
            if ("${ARG_UNPARSED_ARGUMENTS}" STREQUAL "${PROJECT_NAME}")
                set(_fix "write_config\(\)")
            else()
                set(_fix "write_config\(PLUGINS ${ARG_UNPARSED_ARGUMENTS}\)")
            endif()
            message(DEPRECATION "======DEPRECATION=DETECTED==================================================\nPROPOSED FIX:\n${CMAKE_CURRENT_LIST_FILE}\n\"write_config(${ARGN})\" --> \"${_fix}\"\n\============================================================================")
            set(_plugins ${ARG_UNPARSED_ARGUMENTS})
            set(_classname ${PLUGIN_NAME})
            set(_component ${ARG_UNPARSED_ARGUMENTS})
            message(STATUS "Assuming:")
            message(STATUS "Plugin: ${_plugins}")
            message(STATUS "Classname: ${_classname}")
            message(STATUS "Component: ${_component}")
        endif()
    endif()

    if(ARG_CUSTOM_PARAMS_WHITELIST)
        set(CONFIG_GENERATOR_PARAMS_WHITELIST "${ARG_CUSTOM_PARAMS_WHITELIST}")
    else()
        set(CONFIG_GENERATOR_PARAMS_WHITELIST "${CONFIG_GENERATOR_PATH}/params.config")
    endif()

    if(NOT _component AND NOT _plugins AND NOT _classname)
    if (NOT ARG_SKIP_CLASSNAME)
        if(ARG_CLASSNAME)
            set(_classname ${ARG_CLASSNAME})
        else()
            set(_classname ${PROJECT_NAME})
        endif()
    endif()

    if(ARG_PLUGINS)
        set(_plugins ${ARG_PLUGINS})
    else()
        set(_plugins ${PROJECT_NAME})
    endif()

    if(ARG_COMPONENT)
        set(_component ${ARG_COMPONENT})
    else()
        set(_component ${PROJECT_NAME})
    endif()
    endif()

    if(NOT ARG_INSTALL_PATH)
        set(_install_path "${CMAKE_INSTALL_PREFIX}/../etc/${NAMESPACE}/plugins/")
    else()
        set(_install_path "${ARG_INSTALL_PATH}")
    endif(NOT ARG_INSTALL_PATH)

    if(NOT ARG_INSTALL_NAME)
        set(_install_var_filename plugin)
        set(extenstion ".json")
    else()
        list(LENGTH _plugins _plugins_length)
        if(_plugins_length GREATER 1)
            message(FATAL_ERROR "Using INSTALL_NAME together with multiple plugins will result in file overwrites :')")
        else()
            set(custom_filename "${ARG_INSTALL_NAME}")
            set(_install_var_filename custom_filename)
        endif()
    endif(NOT ARG_INSTALL_NAME)

    if (NOT ARG_SKIP_LOCATOR)
        if(ARG_LOCATOR)
            set(_locator ${ARG_LOCATOR})
        else()
            set(_locator lib${MODULE_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
        endif()
    endif()

    set(COMPARE ON) # default on
    if(ARG_SKIP_COMPARE)
        set(COMPARE OFF)
    endif(ARG_SKIP_COMPARE)

    foreach(plugin ${_plugins})
        set(config_generated "N")
        if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/${plugin}.conf.in")
            message(STATUS "Writing configuration for ${plugin}")

            set(_execute_command "${CONFIG_GENERATOR}")

            if (NOT ARG_SKIP_LOCATOR)
                list(APPEND _execute_command  "-l" "${_locator}")
            endif()

            if (NOT ARG_SKIP_CLASSNAME)
                list(APPEND _execute_command  "-c" "${_classname}")
            endif()

            list(APPEND _execute_command  "-o" "${CMAKE_CURRENT_BINARY_DIR}/config/${plugin}.json")
            list(APPEND _execute_command  "-p" "${CONFIG_GENERATOR_PARAMS_WHITELIST}")
            list(APPEND _execute_command  "--indent" 1)

            file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/config")

            if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/${plugin}.conf.in")
                configure_file( "${CMAKE_CURRENT_LIST_DIR}/${plugin}.conf.in"
                    "${CMAKE_CURRENT_BINARY_DIR}/config/${plugin}.conf"
                    @ONLY)
                list(APPEND _execute_command  "-i" "${plugin}.conf")
            endif()

            list(APPEND _execute_command  ${plugin} "${CMAKE_CURRENT_BINARY_DIR}/config")

            execute_process(COMMAND ${PYTHON_EXECUTABLE} ${_execute_command} RESULT_VARIABLE rv)
            if(NOT ${rv} EQUAL 0)
                message(FATAL_ERROR "config_generator failed.")
                return()
            endif()
            set(config_generated "Y")
        else()
                message(SEND_ERROR "Missing config template:\n\'${CMAKE_CURRENT_LIST_DIR}/${plugin}.conf.in\'")
        endif()
       
        set(_install_filename "${${_install_var_filename}}${extenstion}")       

        install(
                FILES ${CMAKE_CURRENT_BINARY_DIR}/config/${plugin}.json 
                DESTINATION ${_install_path}
                RENAME ${_install_filename}
                COMPONENT ${_component})


    endforeach()


    unset(_plugins)
    unset(_classname)
    unset(_component)

endfunction(write_config)

