/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright {{YEAR_OF_GENERATION}} [PLEASE ADD COPYRIGHT NAME!]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

{{HEADER_INCLUDES}}

namespace Thunder {
namespace Plugin {

    class {{PLUGIN_NAME}} {{HEADER_INHERITED_CLASS}} {
    public:
    {{PLUGIN_NAME}}(const {{PLUGIN_NAME}}&) = delete;
    {{PLUGIN_NAME}}& operator=(const {{PLUGIN_NAME}}&) = delete;
    {{PLUGIN_NAME}}({{PLUGIN_NAME}}&&) = delete;
    {{PLUGIN_NAME}}& operator=({{PLUGIN_NAME}}&&) = delete;

    {{PLUGIN_NAME}}()
    {{HEADER_CONSTRUCTOR}}
    {   
    }

    ~{{PLUGIN_NAME}}() override = default;
{{ADD_PRIVATE_FIELD}}
    {{CONFIG_CLASS}}
    {{JSONRPC_EVENT}}
{{ADD_PUBLIC_FIELD}}
    // IPlugin Methods
    const string Initialize(PluginHost::IShell* service) override;
    void Deinitialize(PluginHost::IShell* service) override;
    string Information() const override;
    {{HEADER_DEACTIVATE_METHOD}}
    {{HEADER_DANGLING_METHOD}}

    {{HEADER_INHERITED_METHOD}}

    BEGIN_INTERFACE_MAP({{PLUGIN_NAME}})
    {{HEADER_INTERFACE_ENTRY}}
    {{HEADER_INTERFACE_AGGREGATE}}
    END_INTERFACE_MAP
    
    private:
    {{HEADER_USING_CONTAINER}}
    {{HEADER_STATIC_TIMEOUT}}
    
    {{HEADER_NOTIFY}}

    {{HEADER_MEMBERS}}
    };
} // Plugin
} // Thunder